// <auto-generated />
using System;
using System.Collections.Generic;
using ECommerce.Inventory.Data;
using ECommerce.Inventory.Domain.AggregatesModel;
using ECommerce.Shared.Common.AggregatesModel.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ECommerce.Inventory.DbMigrator.PostgreSQL.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    [Migration("20240922151151_UpdateShopCollection")]
    partial class UpdateShopCollection
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Discount_AppliedToCategories", b =>
                {
                    b.Property<Guid>("Discount_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("discount_id");

                    b.Property<Guid>("Category_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.HasKey("Discount_Id", "Category_Id")
                        .HasName("pk_discount_applied_to_categories");

                    b.HasIndex("Category_Id")
                        .HasDatabaseName("ix_discount_applied_to_categories_category_id");

                    b.HasIndex("Discount_Id")
                        .HasDatabaseName("ix_discount_applied_to_categories_discount_id");

                    b.ToTable("discount_applied_to_categories", (string)null);
                });

            modelBuilder.Entity("Discount_AppliedToProducts", b =>
                {
                    b.Property<Guid>("Discount_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("discount_id");

                    b.Property<Guid>("Product_Id")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("Discount_Id", "Product_Id")
                        .HasName("pk_discount_applied_to_products");

                    b.HasIndex("Discount_Id")
                        .HasDatabaseName("ix_discount_applied_to_products_discount_id");

                    b.HasIndex("Product_Id")
                        .HasDatabaseName("ix_discount_applied_to_products_product_id");

                    b.ToTable("discount_applied_to_products", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.AttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("ProductAttributeId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_attribute_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_attribute_values");

                    b.HasIndex("ProductAttributeId")
                        .HasDatabaseName("ix_attribute_values_product_attribute_id");

                    b.ToTable("attribute_values", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''");

                    b.Property<bool>("HasDiscountsApplied")
                        .HasColumnType("boolean")
                        .HasColumnName("has_discounts_applied");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("slug");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_categories_parent_id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<AddressInfo>("AddressInfo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("address_info")
                        .HasDefaultValueSql("'{}'");

                    b.Property<string>("ContactName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("contact_name");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_default");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_contacts");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_contacts_customer_id");

                    b.ToTable("contacts", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("gender")
                        .HasDefaultValueSql("'UNSPECIFIED'");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("last_name");

                    b.Property<string>("LevelType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("level_type")
                        .HasDefaultValueSql("'SILVER'");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("RefUserId")
                        .HasColumnType("text")
                        .HasColumnName("ref_user_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''");

                    b.Property<Guid?>("DiscountId")
                        .HasColumnType("uuid")
                        .HasColumnName("discount_id");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("discount_type")
                        .HasDefaultValueSql("'UNSPECIFIED'");

                    b.Property<string>("DiscountUnit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("discount_unit")
                        .HasDefaultValueSql("'UNSPECIFIED'");

                    b.Property<IReadOnlyCollection<DiscountUsageHistory>>("DiscountUsageHistory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("discount_usage_history")
                        .HasDefaultValueSql("'[]'");

                    b.Property<decimal?>("DiscountValue")
                        .HasColumnType("numeric")
                        .HasColumnName("discount_value");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("HasDiscountsApplied")
                        .HasColumnType("boolean")
                        .HasColumnName("has_discounts_applied");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<int?>("LimitationTimes")
                        .HasColumnType("integer")
                        .HasColumnName("limitation_times");

                    b.Property<string>("LimitationType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("limitation_type")
                        .HasDefaultValueSql("'UNSPECIFIED'");

                    b.Property<decimal?>("MaxDiscountAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("max_discount_amount");

                    b.Property<decimal?>("MinOrderValue")
                        .HasColumnType("numeric")
                        .HasColumnName("min_order_value");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("slug");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_discounts");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_discounts_code");

                    b.HasIndex("DiscountId")
                        .HasDatabaseName("ix_discounts_discount_id");

                    b.ToTable("discounts", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Merchant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("MerchantNumber")
                        .HasColumnType("text")
                        .HasColumnName("merchant_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("slug");

                    b.HasKey("Id")
                        .HasName("pk_merchants");

                    b.ToTable("merchants", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.MerchantCategory", b =>
                {
                    b.Property<Guid>("MerchantId")
                        .HasColumnType("uuid")
                        .HasColumnName("merchant_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("MerchantId", "CategoryId")
                        .HasName("pk_merchant_categories");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_merchant_categories_category_id");

                    b.ToTable("merchant_categories", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<decimal>("DeliveryFee")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("delivery_fee");

                    b.Property<DateTimeOffset>("DeliverySchedule")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("delivery_schedule");

                    b.Property<Guid>("MerchantId")
                        .HasColumnType("uuid")
                        .HasColumnName("merchant_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("order_number");

                    b.Property<DateTimeOffset>("PaidAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("paid_at");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_method")
                        .HasDefaultValueSql("'UNSPECIFIED'");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_status")
                        .HasDefaultValueSql("'UNPAID'");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'TO_PAY'");

                    b.Property<decimal>("TotalItemPrice")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("total_item_price");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("total_price");

                    b.Property<decimal>("VatPercent")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("vat_percent");

                    b.Property<decimal>("VatPrice")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("vat_price");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_orders_customer_id");

                    b.HasIndex("MerchantId")
                        .HasDatabaseName("ix_orders_merchant_id");

                    b.HasIndex("OrderNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_orders_order_number");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.OrderContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<AddressInfo>("AddressInfo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("address_info")
                        .HasDefaultValueSql("'{}'");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("contact_name");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("pk_order_contacts");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasDatabaseName("ix_order_contacts_order_id");

                    b.ToTable("order_contacts", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("ListPrice")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("list_price");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("product_description");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("product_name");

                    b.Property<Guid?>("ProductVariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_variant_id");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("quantity");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("total_price");

                    b.Property<decimal>("TotalVatPrice")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("total_vat_price");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("unit_price");

                    b.Property<decimal>("VatPercent")
                        .HasPrecision(6, 2)
                        .HasColumnType("numeric(6,2)")
                        .HasColumnName("vat_percent");

                    b.Property<decimal>("VatPrice")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("vat_price");

                    b.HasKey("Id")
                        .HasName("pk_order_items");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_items_order_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_order_items_product_id");

                    b.HasIndex("ProductVariantId")
                        .HasDatabaseName("ix_order_items_product_variant_id");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.OrderPromotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("BundlePromotionDiscountType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("bundle_promotion_discount_type")
                        .HasDefaultValueSql("'UNSPECIFIED'");

                    b.Property<IReadOnlyCollection<OrderPromotionCondition>>("Conditions")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("conditions")
                        .HasDefaultValueSql("'[]'");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("MaxQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("max_quantity");

                    b.Property<Guid>("MerchantId")
                        .HasColumnType("uuid")
                        .HasColumnName("merchant_id");

                    b.Property<decimal>("MinSpend")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("min_spend");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("slug");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'NEW'");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'UNSPECIFIED'");

                    b.HasKey("Id")
                        .HasName("pk_order_promotions");

                    b.HasIndex("MerchantId")
                        .HasDatabaseName("ix_order_promotions_merchant_id");

                    b.ToTable("order_promotions", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.OrderPromotionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid>("OrderPromotionId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_promotion_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("pk_order_promotion_items");

                    b.HasIndex("OrderPromotionId")
                        .HasDatabaseName("ix_order_promotion_items_order_promotion_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_order_promotion_items_product_id");

                    b.ToTable("order_promotion_items", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.OrderPromotionSubItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("DiscountPercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("discount_percentage");

                    b.Property<decimal>("DiscountPrice")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("discount_price");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int>("MaxItemsPerOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("max_items_per_order");

                    b.Property<string>("NoProductsPerOrderLimit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("no_products_per_order_limit")
                        .HasDefaultValueSql("'SPECIFIC'");

                    b.Property<Guid>("OrderPromotionId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_promotion_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid?>("ProductVariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_variant_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'UNSPECIFIED'");

                    b.HasKey("Id")
                        .HasName("pk_order_promotion_sub_items");

                    b.HasIndex("OrderPromotionId")
                        .HasDatabaseName("ix_order_promotion_sub_items_order_promotion_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_order_promotion_sub_items_product_id");

                    b.HasIndex("ProductVariantId")
                        .HasDatabaseName("ix_order_promotion_sub_items_product_variant_id");

                    b.ToTable("order_promotion_sub_items", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.OrderStatusTracking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_status")
                        .HasDefaultValueSql("'UNSPECIFIED'");

                    b.HasKey("Id")
                        .HasName("pk_order_status_trackings");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_status_trackings_order_id");

                    b.ToTable("order_status_trackings", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.PaymentMethodTracking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_method")
                        .HasDefaultValueSql("'UNSPECIFIED'");

                    b.Property<decimal>("Value")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_payment_method_trackings");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_payment_method_trackings_order_id");

                    b.ToTable("payment_method_trackings", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("HasDiscountsApplied")
                        .HasColumnType("boolean")
                        .HasColumnName("has_discounts_applied");

                    b.Property<Guid>("MerchantId")
                        .HasColumnType("uuid")
                        .HasColumnName("merchant_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("slug");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("MerchantId")
                        .HasDatabaseName("ix_products_merchant_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ProductAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<bool>("Predefined")
                        .HasColumnType("boolean")
                        .HasColumnName("predefined");

                    b.HasKey("Id")
                        .HasName("pk_product_attributes");

                    b.ToTable("product_attributes", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ProductProductAttribute", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("ProductAttributeId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_attribute_id");

                    b.HasKey("ProductId", "ProductAttributeId")
                        .HasName("pk_product_product_attributes");

                    b.HasIndex("ProductAttributeId")
                        .HasDatabaseName("ix_product_product_attributes_product_attribute_id");

                    b.ToTable("product_product_attributes", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ProductPromotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<Guid>("MerchantId")
                        .HasColumnType("uuid")
                        .HasColumnName("merchant_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("slug");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status")
                        .HasDefaultValueSql("'NEW'");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'UNSPECIFIED'");

                    b.HasKey("Id")
                        .HasName("pk_product_promotions");

                    b.HasIndex("MerchantId")
                        .HasDatabaseName("ix_product_promotions_merchant_id");

                    b.ToTable("product_promotions", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ProductPromotionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("DiscountPercentage")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("discount_percentage");

                    b.Property<decimal>("DiscountPrice")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("discount_price");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<decimal>("ListPrice")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("list_price");

                    b.Property<int>("MaxItemsPerOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("max_items_per_order");

                    b.Property<int>("NoProductsPerOrderLimit")
                        .HasColumnType("integer")
                        .HasColumnName("no_products_per_order_limit");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("ProductPromotionId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_promotion_id");

                    b.Property<Guid?>("ProductVariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_variant_id");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_product_promotion_items");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_promotion_items_product_id");

                    b.HasIndex("ProductPromotionId")
                        .HasDatabaseName("ix_product_promotion_items_product_promotion_id");

                    b.HasIndex("ProductVariantId")
                        .HasDatabaseName("ix_product_promotion_items_product_variant_id");

                    b.ToTable("product_promotion_items", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ProductVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<int>("Stock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("stock");

                    b.HasKey("Id")
                        .HasName("pk_product_variants");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_variants_product_id");

                    b.ToTable("product_variants", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ProductVariantAttributeValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("AttributeValueId")
                        .HasColumnType("uuid")
                        .HasColumnName("attribute_value_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ProductAttributeId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_attribute_id");

                    b.Property<Guid>("ProductVariantId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_variant_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_product_variant_attribute_values");

                    b.HasAlternateKey("ProductVariantId", "ProductAttributeId")
                        .HasName("ak_product_variant_attribute_values_product_variant_id_product");

                    b.HasIndex("AttributeValueId")
                        .HasDatabaseName("ix_product_variant_attribute_values_attribute_value_id");

                    b.HasIndex("ProductAttributeId")
                        .HasDatabaseName("ix_product_variant_attribute_values_product_attribute_id");

                    b.ToTable("product_variant_attribute_values", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ShopCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''");

                    b.Property<Guid>("MerchantId")
                        .HasColumnType("uuid")
                        .HasColumnName("merchant_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("slug");

                    b.HasKey("Id")
                        .HasName("pk_shop_collections");

                    b.HasIndex("MerchantId")
                        .HasDatabaseName("ix_shop_collections_merchant_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_shop_collections_parent_id");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_shop_collections_slug");

                    b.ToTable("shop_collections", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ShopCollectionProduct", b =>
                {
                    b.Property<Guid>("ShopCollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("shop_collection_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("ShopCollectionId", "ProductId")
                        .HasName("pk_shop_collection_product");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_shop_collection_product_product_id");

                    b.ToTable("shop_collection_product", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description")
                        .HasDefaultValueSql("''");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<Guid>("MerchantId")
                        .HasColumnType("uuid")
                        .HasColumnName("merchant_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("slug");

                    b.Property<string>("StoreAddress")
                        .HasColumnType("text")
                        .HasColumnName("store_address");

                    b.Property<string>("StoreNumber")
                        .HasColumnType("text")
                        .HasColumnName("store_number");

                    b.HasKey("Id")
                        .HasName("pk_stores");

                    b.HasIndex("MerchantId")
                        .HasDatabaseName("ix_stores_merchant_id");

                    b.ToTable("stores", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("AppliedOnType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("applied_on_type")
                        .HasDefaultValueSql("'UNSPECIFIED'");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("discount_type")
                        .HasDefaultValueSql("'UNSPECIFIED'");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<int>("MaxQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("max_quantity");

                    b.Property<int>("MaxQuantityPerUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("max_quantity_per_user");

                    b.Property<decimal?>("MaxValue")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("max_value");

                    b.Property<decimal>("MinSpend")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("min_spend");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("PopularType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("popular_type")
                        .HasDefaultValueSql("'UNSPECIFIED'");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("TargetCustomerType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("target_customer_type")
                        .HasDefaultValueSql("'UNSPECIFIED'");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type")
                        .HasDefaultValueSql("'UNSPECIFIED'");

                    b.Property<decimal>("Value")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_vouchers");

                    b.ToTable("vouchers", (string)null);
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.VoucherProduct", b =>
                {
                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uuid")
                        .HasColumnName("voucher_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("VoucherId", "ProductId")
                        .HasName("pk_voucher_product");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_voucher_product_product_id");

                    b.ToTable("voucher_product", (string)null);
                });

            modelBuilder.Entity("Discount_AppliedToCategories", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Category", null)
                        .WithMany()
                        .HasForeignKey("Category_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discount_applied_to_categories_categories_category_id");

                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Discount", null)
                        .WithMany()
                        .HasForeignKey("Discount_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discount_applied_to_categories_discounts_discount_id");
                });

            modelBuilder.Entity("Discount_AppliedToProducts", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Discount", null)
                        .WithMany()
                        .HasForeignKey("Discount_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discount_applied_to_products_discounts_discount_id");

                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Product", null)
                        .WithMany()
                        .HasForeignKey("Product_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discount_applied_to_products_products_product_id");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.AttributeValue", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.ProductAttribute", "ProductAttribute")
                        .WithMany("AttributeValues")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_attribute_values_product_attributes_product_attribute_id");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Category", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Category", "Parent")
                        .WithMany("Categories")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_categories_categories_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Contact", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Customer", "Customer")
                        .WithMany("Contacts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contacts_customers_customer_id");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Discount", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Discount", null)
                        .WithMany("AppliedDiscounts")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("fk_discounts_discounts_discount_id");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.MerchantCategory", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Category", "Category")
                        .WithMany("MerchantCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_merchant_categories_categories_category_id");

                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Merchant", "Merchant")
                        .WithMany("MerchantCategories")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_merchant_categories_merchants_merchant_id");

                    b.Navigation("Category");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Order", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_customers_customer_id");

                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Merchant", "Merchant")
                        .WithMany("Orders")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_merchants_merchant_id");

                    b.Navigation("Customer");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.OrderContact", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Order", "Order")
                        .WithOne("OrderContact")
                        .HasForeignKey("ECommerce.Inventory.Domain.AggregatesModel.OrderContact", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_contacts_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.OrderItem", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_items_orders_order_id");

                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_order_items_products_product_id");

                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.ProductVariant", "ProductVariant")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_order_items_product_variants_product_variant_id");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.OrderPromotion", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Merchant", "Merchant")
                        .WithMany("OrderPromotions")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_promotions_merchants_merchant_id");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.OrderPromotionItem", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.OrderPromotion", "OrderPromotion")
                        .WithMany("Items")
                        .HasForeignKey("OrderPromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_promotion_items_order_promotions_order_promotion_id");

                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Product", "Product")
                        .WithMany("OrderPromotionItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_promotion_items_products_product_id");

                    b.Navigation("OrderPromotion");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.OrderPromotionSubItem", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.OrderPromotion", "OrderPromotion")
                        .WithMany("SubItems")
                        .HasForeignKey("OrderPromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_promotion_sub_items_order_promotions_order_promotion_");

                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Product", "Product")
                        .WithMany("OrderPromotionSubItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_promotion_sub_items_products_product_id");

                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("ProductVariantId")
                        .HasConstraintName("fk_order_promotion_sub_items_product_variants_product_variant_");

                    b.Navigation("OrderPromotion");

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.OrderStatusTracking", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Order", "Order")
                        .WithMany("OrderStatusTrackings")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_status_trackings_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.PaymentMethodTracking", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Order", "Order")
                        .WithMany("PaymentMethodTrackings")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payment_method_trackings_orders_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Product", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Merchant", "Merchant")
                        .WithMany("Products")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_merchants_merchant_id");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ProductProductAttribute", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductProductAttributes")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_product_attributes_product_attributes_product_attri");

                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Product", "Product")
                        .WithMany("ProductProductAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_product_attributes_products_product_id");

                    b.Navigation("Product");

                    b.Navigation("ProductAttribute");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ProductPromotion", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Merchant", "Merchant")
                        .WithMany("ProductPromotions")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_promotions_merchants_merchant_id");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ProductPromotionItem", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Product", "Product")
                        .WithMany("ProductPromotionItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_promotion_items_products_product_id");

                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.ProductPromotion", "ProductPromotion")
                        .WithMany("Items")
                        .HasForeignKey("ProductPromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_promotion_items_product_promotions_product_promotio");

                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.ProductVariant", "ProductVariant")
                        .WithMany("ProductPromotionItems")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_product_promotion_items_product_variants_product_variant_id");

                    b.Navigation("Product");

                    b.Navigation("ProductPromotion");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ProductVariant", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_variants_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ProductVariantAttributeValue", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.AttributeValue", "AttributeValue")
                        .WithMany("ProductVariantAttributeValues")
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_product_variant_attribute_values_attribute_values_attribute");

                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.ProductAttribute", "ProductAttribute")
                        .WithMany("ProductVariantAttributeValues")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_variant_attribute_values_product_attributes_product");

                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.ProductVariant", "ProductVariant")
                        .WithMany("ProductVariantAttributeValues")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_variant_attribute_values_product_variants_product_v");

                    b.Navigation("AttributeValue");

                    b.Navigation("ProductAttribute");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ShopCollection", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Merchant", "Merchant")
                        .WithMany("ShopCollections")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shop_collections_merchants_merchant_id");

                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.ShopCollection", "Parent")
                        .WithMany("ShopCollections")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_shop_collections_shop_collections_parent_id");

                    b.Navigation("Merchant");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ShopCollectionProduct", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Product", "Product")
                        .WithMany("ShopCollectionProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shop_collection_product_products_product_id");

                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.ShopCollection", "ShopCollection")
                        .WithMany("ShopCollectionProducts")
                        .HasForeignKey("ShopCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shop_collection_product_shop_collections_shop_collection_id");

                    b.Navigation("Product");

                    b.Navigation("ShopCollection");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Store", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Merchant", "Merchant")
                        .WithMany("Stores")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stores_merchants_merchant_id");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.VoucherProduct", b =>
                {
                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Product", "Product")
                        .WithMany("VoucherProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voucher_product_products_product_id");

                    b.HasOne("ECommerce.Inventory.Domain.AggregatesModel.Voucher", "Voucher")
                        .WithMany("VoucherProducts")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voucher_product_vouchers_voucher_id");

                    b.Navigation("Product");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.AttributeValue", b =>
                {
                    b.Navigation("ProductVariantAttributeValues");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Category", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("MerchantCategories");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Customer", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Discount", b =>
                {
                    b.Navigation("AppliedDiscounts");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Merchant", b =>
                {
                    b.Navigation("MerchantCategories");

                    b.Navigation("OrderPromotions");

                    b.Navigation("Orders");

                    b.Navigation("ProductPromotions");

                    b.Navigation("Products");

                    b.Navigation("ShopCollections");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Order", b =>
                {
                    b.Navigation("OrderContact")
                        .IsRequired();

                    b.Navigation("OrderItems");

                    b.Navigation("OrderStatusTrackings");

                    b.Navigation("PaymentMethodTrackings");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.OrderPromotion", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("SubItems");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("OrderPromotionItems");

                    b.Navigation("OrderPromotionSubItems");

                    b.Navigation("ProductProductAttributes");

                    b.Navigation("ProductPromotionItems");

                    b.Navigation("ProductVariants");

                    b.Navigation("ShopCollectionProducts");

                    b.Navigation("VoucherProducts");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ProductAttribute", b =>
                {
                    b.Navigation("AttributeValues");

                    b.Navigation("ProductProductAttributes");

                    b.Navigation("ProductVariantAttributeValues");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ProductPromotion", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ProductVariant", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductPromotionItems");

                    b.Navigation("ProductVariantAttributeValues");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.ShopCollection", b =>
                {
                    b.Navigation("ShopCollectionProducts");

                    b.Navigation("ShopCollections");
                });

            modelBuilder.Entity("ECommerce.Inventory.Domain.AggregatesModel.Voucher", b =>
                {
                    b.Navigation("VoucherProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
